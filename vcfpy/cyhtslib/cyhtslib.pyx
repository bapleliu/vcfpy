"""Cython-based wrapper around htslib, enabling vcfpy to use faster I/O

Based on code from cyvcf2.
"""

from __future__ import print_function

# Python imports

import locale
import os
import sys

from vcfpy import OrderedDict
from vcfpy.header import Header, HeaderLine, SamplesInfos
from vcfpy.parser import build_header_parsers, process_alt
from vcfpy.warn_utils import WarningHelper

# Cython imports

from libc cimport stdlib
from cython cimport view

#: Encoding to use for byte/string conversion
ENC = locale.getpreferredencoding()

# Overcome lack of __file__ in cython
import inspect
if not hasattr(sys.modules[__name__], '__file__'):
    __file__ = inspect.getfile(inspect.currentframe())

# Constants for defining whether to iterate over keys or values or both
cdef int INFO_ITER_KEYS = 1
cdef int INFO_ITER_VALUES = 2
cdef int INFO_ITER_ITEMS = 3


cdef to_bytes(s, enc=ENC):
    """Helper function for ensuring ``bytes`` type"""
    if not isinstance(s, bytes):
        return s.encode(enc)
    return s


cdef from_bytes(s):
    """Helper function for ensuring ``string`` type"""
    if isinstance(s, bytes):
        try:
            return s.decode(ENC)
        except UnicodeDecodeError:
            return s.decode('utf8')
    return s


cdef class _ReaderImpl(object):
    """Wrapper for read-only VCFFile objects

    Implements public, non-static interface of vcfpy.reader.Reader
    """

    cdef readonly str path
    cdef readonly str tabix_path
    cdef readonly bint lazy
    cdef readonly int threads
    cdef VCFFile _vcf_file
    cdef tbx_t * idx
    cdef hts_idx_t * hidx
    cdef readonly object header

    def __init__(self, fname, tabix_path=None, lazy=False, samples=None, threads=None):
        # Interpret special file name '-'
        if fname == b'-' or fname == '-':
            fname = b'/dev/stdin'
        fname = to_bytes(fname)
        # Assign properties
        self.path = from_bytes(fname)
        self.tabix_path = from_bytes(tabix_path)
        self.lazy = lazy
        self.threads = threads or 1
        # Construct internal VCFFile
        self._vcf_file = VCFFile(fname, b'rb', lazy, samples, threads)
        # Load header into vcfpy.header.Header object
        self.header = self._vcf_file.header

    def fetch(_ReaderImpl self, str chrom_or_region, begin=None, end=None):
        """Re-implementation of the pure Python Reader.fetch()"""
        if begin is not None and end is None:
            raise ValueError('begin and end must both be None or neither')

        # Build region string if begin and end are given
        region = chrom_or_region
        if begin and end:
            region = '%s:%d-%d' % (chrom_or_region, begin, end)

        if self.path.endswith('.bcf'):
            yield from self._vcf_file.fetch_bcf_region(region)
        else:
            yield from self._vcf_file.fetch_vcf_region(region)

    def __iter__(self):
        return self._vcf_file

    def __enter__(self):
        return self

    def __exit__(self, type_, value, traceback):
        # TODO: we have to think about something here...
        # self._vcf_file.close()
        pass

    # TODO: add orig_samples property that returns regardless of limiting to set of samples

    property samples:
        """SamplesInfos object with sample information"""
        def __get__(self):
            return self._vcf_file.samples


cdef inline HeaderLineFactory newHeaderLineFactory(bcf_hdr_t * hdr, object warning_helper):
    cdef HeaderLineFactory result = HeaderLineFactory()
    result.hdr = hdr
    result.warning_helper = warning_helper
    result.parsers = build_header_parsers(warning_helper)
    return result


cdef class HeaderLineFactory:
    """Helper class for converting from ``bcf_hdr_t`` entries to ``vcfpy.header.Header`` objects

    Constructed with ``newHeaderLineFactory()``
    """

    cdef bcf_hdr_t * hdr
    cdef object warning_helper
    cdef dict parsers

    def __cinit__(self):
        self.hdr = NULL
        self.warning_helper = None
        self.parsers = None

    cdef object build(self, bcf_hrec_t * hrec):
        if hrec.type == BCF_HL_GEN:
            return self._build_generic(hrec)
        else:
            return self._build_parsed(hrec)

    cdef object _build_parsed(self, bcf_hrec_t * hrec):
        mapping = OrderedDict(
            (from_bytes(hrec.keys[i]), from_bytes(hrec.vals[i]))
            for i in range(hrec.nkeys)
            if hrec.keys[i] != b'IDX')  # skip auto-generated by BCFtools
        mapping_s = '<' + ','.join('%s=%s' % (k, v) for k, v in mapping.items()) + '>'
        key = from_bytes(hrec.key)
        parser = self.parsers.get(key, self.parsers['__default__'])
        return parser.parse_key_value(key, mapping_s)

    cdef object _build_generic(self, bcf_hrec_t * hrec):
        """Build "generic" header line, just key/value mapping, e.g., used for storing command lines"""
        return HeaderLine(from_bytes(hrec.key), from_bytes(hrec.value))


cdef class VCFFile(object):
    """Representation of BCF/VCF file"""
    cdef htsFile *hts
    cdef bcf_hdr_t *hdr
    cdef tbx_t *idx
    cdef hts_idx_t *hidx
    cdef int n_samples
    cdef int PASS
    cdef bytes fname
    cdef bint lazy
    #: vcfpy.headre.SamplesInfo object
    cdef public object samples
    cdef list _seqnames
    # holds a lookup of format field -> type.
    cdef dict format_types
    cdef object header

    def __init__(self, fname, mode='r', lazy=False, samples=None, threads=None):
        # Open file and balk out in the case of errors
        if not os.path.exists(fname):
            raise Exception("bad path: %s" % fname)
        fname, mode = to_bytes(fname), to_bytes(mode)
        self.hts = hts_open(fname, mode)
        if self.hts == NULL:
            raise IOError("Error opening %s" % fname)
        if self.hts.format.format != vcf and self.hts.format.format != bcf:
            raise IOError("%s if not valid bcf or vcf" % fname)

        # Read BCF header
        cdef bcf_hdr_t *hdr
        hdr = self.hdr = bcf_hdr_read(self.hts)
        # Set samples to be pulled out, if only limited to a sub set
        # TODO: pure python implementation is lacking this
        if samples is not None:
            self.set_samples(samples)
        self.n_samples = bcf_hdr_nsamples(self.hdr)
        # Extract SamplesInfos from header, possibly after limiting to subset
        if samples is None:
            samples = self.get_samples()
        self.samples = SamplesInfos(samples)
        # Initialize members
        self.PASS = -1
        self.fname = to_bytes(fname)
        self.lazy = lazy
        self._seqnames = []
        self.format_types = {}
        if threads is not None:
            self.set_threads(threads)
        # Load header
        self.header = self.load_header()

    def set_threads(self, int n):
        """Sets number of reader/writer threads in this object's htsfile"""
        v = hts_set_threads(self.hts, n)
        if v < 0:
            raise Exception("error setting number of threads: %d" % v)

    def set_samples(self, samples):
        """Set the samples to be pulled from the VCF; this must be called before any iteration.
        Parameters
        ----------
        samples: list
            list of samples to extract.
        """
        if samples is None:
            samples = "-".encode()
        if isinstance(samples, list):
            samples = to_bytes(",".join(samples))
        else:
            samples = to_bytes(samples)

        ret = bcf_hdr_set_samples(self.hdr, <const char *>samples, 0)
        assert ret >= 0, ("error setting samples", ret)
        if ret != 0 and samples != "-":
            s = samples.split(",")
            if ret < len(s):
                # TODO: update name, makes no sense here
                sys.stderr.write("warning: not all samples in PED found in VCF\n")

    def get_samples(self):
        """Return list of samples from file
        """
        return [from_bytes(self.hdr.samples[i])
                for i in range(0, bcf_hdr_nsamples(self.hdr))]

    cpdef object load_header(self):
        """Load header information into vcfpy.header.Header"""
        wh = WarningHelper()
        cdef HeaderLineFactory factory = newHeaderLineFactory(self.hdr, wh)
        factory.build(self.hdr.hrec[0])
        lines = [factory.build(self.hdr.hrec[i]) for i in range(self.hdr.nhrec)]
        return Header(lines, self.samples, wh)

    def fetch_vcf_region(_ReaderImpl self, str region):
        if self.idx == NULL:
            self.idx = tbx_index_load(to_bytes(self.fname))
            assert self.idx != NULL, "Error loading tabix index for %s" % self.fname

        cdef hts_itr_t *itr
        cdef kstring_t s
        cdef bcf1_t *b
        cdef int slen, ret

        itr = tbx_itr_querys(self.idx, to_bytes(region))
        if itr == NULL:
            print('no intervals found for %s at %s\n' % (self.fname, region), file=sys.stderr)
            raise StopIteration

        try:
            slen = tbx_itr_next(self.hts, self.idx, itr, &s)
            while slen > 0:
                b = bcf_init()
                ret = vcf_parse(&s, self.hdr, b)
                if ret > 0:
                    bcf_destroy(b)
                    raise Exception('error parsing')
                yield newRecord(b, self)
                slen = tbx_itr_next(self.hts, self.idx, itr, &s)
        finally:
            stdlib.free(s.s)
            hts_itr_destroy(itr)

    def fetch_bcf_region(_ReaderImpl self, str region):
        if self.hidx == NULL:
            self.hidx = bcf_index_load(self.fname)
            assert self.hidx != NULL, 'Error loading .csi index for %s' % self.fname

        cdef bcf1_t *b
        cdef int ret
        cdef hts_itr_t *itr

        itr = bcf_itr_querys(self.hidx, self.hdr, to_bytes(region))
        if itr == NULL:
            print('no intervals found for %s at %s\n' % (self.fname, region), file=sys.stderr)
            raise StopIteration

        try:
            while True:
                b = bcf_init()
                ret = bcf_itr_next(self.hts, itr, b)
                if ret < 0:
                    bcf_destroy(b)
                    break
                yield newRecord(b, self)
        finally:
            if itr != NULL:
                hts_itr_destroy(itr)

    def __next__(self):
        cdef bcf1_t *b = bcf_init()
        cdef int ret
        with nogil:
            ret = bcf_read(self.hts, self.hdr, b)
        if ret >= 0:
            return newRecord(b, self)
        else:
            bcf_destroy(b)
        raise StopIteration

    cdef close(self):
        if self.hdr != NULL:
            bcf_hdr_destroy(self.hdr)
            self.hdr = NULL
        if self.hts != NULL:
            hts_close(self.hts)
            self.hts = NULL
        if self.idx != NULL:
            tbx_destroy(self.idx)
            self.idx = NULL
        if self.hidx != NULL:
            hts_idx_destroy(self.hidx)
            self.hidx = NULL

    def __dealloc__(self):
        """Deallocation for VCFFile

        - deallocate header struct
        - close HTS file
        - free any index-related memory
        """
        self.close()


cdef inline Record newRecord(bcf1_t *b, VCFFile vcf):
    """Construct new Record object in ``bcf1_t`` ``*b`` and with ``VCFFile`` ``vcf``
    """
    cdef Record rec = Record.__new__(Record)
    rec.b = b
    if not vcf.lazy:
        with nogil:
            bcf_unpack(rec.b, 15)
    else:
        with nogil:
            bcf_unpack(rec.b, 1|2|4)
    rec.vcf = vcf
    return rec


cdef class Record(object):
    #: Pointer to the C struct with the BCF record
    cdef bcf1_t *b
    #: Reference to the owning VCFFile
    cdef VCFFile vcf
    #: Cache for lazily parsing ALT
    cdef list _alts

    def __init__(self, *args, **kwargs):
        raise TypeError("Variant object cannot be instantiated directly.")

    def __cinit__(self):
        self.b = NULL
        self._alts = None

    def __repr__(self):
        return "Record(%s:%d %s/%s)" % (self.CHROM, self.POS, self.REF, ",".join(self.ALT.serialize()))

    def __str__(self):
        cdef kstring_t s
        s.s, s.l, s.m = NULL, 0, 0
        vcf_format(self.vcf.hdr, self.b, &s)
        try:
            return s.s[:s.l].decode()
        finally:
            stdlib.free(s.s)

    def __dealloc__(self):
        """Perform deallocation

        - free associated BCF record
        - free all allocated buffers
        """
        if self.b is not NULL:
            bcf_destroy(self.b)
            self.b = NULL

    property CHROM:
        """Return string with the chromosome name"""
        def __get__(self):
            return bcf_hdr_id2name(self.vcf.hdr, self.b.rid).decode()

    property POS:
        """``int`` with 1-based start position of variant"""
        def __get__(self):
            return self.b.pos + 1

    property ID:
        """Return value of ID from the VCF field"""
        def __get__(self):
            cdef char *id = self.b.d.id
            if id == b'.':
                return []
            else:
                return id.decode().split(';')

    property REF:
        """Return ``str`` with reference allele"""
        def __get__(self):
            return self.b.d.allele[0].decode()

    property ALT:
        """Alternative alleles, list of ``str`` for now"""
        def __get__(self):
            cdef int i
            if self._alts is None:
                self._alts = [
                    process_alt(self.vcf.header, self.REF, self.b.d.allele[i].decode())
                    for i in range(1, self.b.n_allele)]
            return self._alts

    property QUAL:
        """The quality value, can be ``None``"""
        def __get__(self):
            cdef float q = self.b.qual
            if bcf_float_is_missing(q):
                return None
            else:
                return q

    property FILTER:
        """Value of the FILTER field from VCF, as list of strings"""
        def __get__(self):
            cdef int i
            cdef int n = self.b.d.n_flt
            if n == 1:
                if self.vcf.PASS != -1:
                    if self.b.d.flt[0] == self.vcf.PASS:
                        return []
                else:
                    v = [from_bytes(bcf_hdr_int2id(self.vcf.hdr, BCF_DT_ID, self.b.d.flt[0]))]
                    if v == b'PASS':
                        self.vcf.PASS = self.b.d.flt[0]
                        return ['PASS']
                    return v
            if n == 0:
                return []
            return list(from_bytes(bcf_hdr_int2id(self.vcf.hdr, BCF_DT_ID, self.b.d.flt[i])) for i in range(n))

    property INFO:
        """Value of the INFO field from VCF, as InfoDict"""
        def __get__(self):
            return newInfoDict(self.vcf.hdr, self.b)


cdef inline InfoDict newInfoDict(bcf_hdr_t * hdr, bcf1_t * b):
    cdef InfoDict result = InfoDict()
    result.hdr = hdr
    result.b = b
    return result


cdef class InfoDict(object):
    """Dictionary-like structure for ``Record.INFO``
    
    Such objects are create internally by accessing ``Variant.INFO``
    is acts like a dictionary where keys are expected to be in the INFO field of the Variant
    and values are typed according to what is specified in the VCF header
    """
    cdef bcf_hdr_t *hdr
    cdef bcf1_t *b

    def __cinit__(self):
        self.hdr = NULL
        self.b = NULL

    def __setitem__(self, key, value):
        # only support strings for now.
        if value is True or value is False:
            ret = bcf_update_info_flag(self.hdr, self.b, to_bytes(key), b"", int(value))
            if ret != 0:
                raise Exception("not able to set flag", key, value, ret)
            return

        ret = bcf_update_info_string(self.hdr, self.b, to_bytes(key), to_bytes(value))
        if ret != 0:
            raise Exception("not able to set: %s -> %s (%d)", key, value, ret)

    cdef _getval(InfoDict self, bcf_info_t * info, char *key):
        cdef bytes skey = key
        cdef long * ptr = NULL
        if (skey == b"AF"):
            ptr[0] = 1;

        if info.len == 1:
            if info.type == BCF_BT_INT8:
                if info.v1.i == INT8_MIN:
                    return None
                return <int>(info.v1.i)

            if info.type == BCF_BT_INT16:
                if info.v1.i == INT16_MIN:
                    return None
                return <int>(info.v1.i)

            if info.type == BCF_BT_INT32:
                if info.v1.i == INT32_MIN:
                    return None
                return <int>(info.v1.i)

            if info.type == BCF_BT_FLOAT:
                if bcf_float_is_missing(info.v1.f):
                    return None
                return info.v1.f

        if info.type == BCF_BT_CHAR:
            v = info.vptr[:info.vptr_len]
            if len(v) > 0 and v[0] == 0x7:
                return None
            return from_bytes(v)

        # FLAG.
        if info.len == 0:
            return bcf_hdr_id2type(self.hdr, BCF_HL_INFO, info.key) == BCF_HT_FLAG

        return bcf_array_to_object(info.vptr, info.type, info.len)

    def __getitem__(self, okey):
        okey = to_bytes(okey)
        cdef char *key = okey
        cdef bcf_info_t *info = bcf_get_info(self.hdr, self.b, key)
        if info == NULL:
            raise KeyError(key)
        return self._getval(info, key)

    def get(self, key, default=None):
        try:
            return self.__getitem__(key)
        except KeyError:
            return default

    def __iter__(self):
        return self.keys()

    def keys(self):
        return newInfoDictIter(self, INFO_ITER_KEYS)

    def values(self):
        return newInfoDictIter(self, INFO_ITER_VALUES)

    def items(self):
        return newInfoDictIter(self, INFO_ITER_ITEMS)


cdef inline InfoDictIter newInfoDictIter(InfoDict info_dict, int iter_mode):
    cdef InfoDictIter result = InfoDictIter()
    result.info_dict = info_dict
    result.iter_mode = iter_mode
    return result


cdef class InfoDictIter(object):
    """Iterator for ``InfoDict`` class"""

    cdef InfoDict info_dict
    cdef int _i
    cdef int iter_mode

    def __init__(self):
        self.info_dict = None
        self._i = 0
        self.iter_mode = 0

    def __iter__(self):
        return self

    def __next__(self):
        cdef bcf_info_t *info = NULL
        cdef char *name
        while info == NULL:
            if self._i >= self.info_dict.b.n_info:
                raise StopIteration
            info = &(self.info_dict.b.d.info[self._i])
            self._i += 1
        name = bcf_hdr_int2id(self.info_dict.hdr, BCF_DT_ID, info.key)
        if self.iter_mode == INFO_ITER_KEYS:
            return name.decode()
        elif self.iter_mode == INFO_ITER_VALUES:
            return self.info_dict._getval(info, name)
        else:
            return name.decode(), self.info_dict._getval(info, name)


# This function is copied verbatim from pysam/cbcf.pyx
cdef bcf_array_to_object(void *data, int type, int n, int scalar=0):
    cdef char    *datac
    cdef int8_t  *data8
    cdef int16_t *data16
    cdef int32_t *data32
    cdef float   *dataf
    cdef int      i

    if not data or n <= 0:
        return None

    if type == BCF_BT_CHAR:
        datac = <char *>data
        value = datac[:n].decode() if datac[0] != bcf_str_missing else None
    else:
        value = []
        if type == BCF_BT_INT8:
            data8 = <int8_t *>data
            for i in range(n):
                if data8[i] == bcf_int8_vector_end:
                    break
                value.append(data8[i] if data8[i] != bcf_int8_missing else None)
        elif type == BCF_BT_INT16:
            data16 = <int16_t *>data
            for i in range(n):
                if data16[i] == bcf_int16_vector_end:
                    break
                value.append(data16[i] if data16[i] != bcf_int16_missing else None)
        elif type == BCF_BT_INT32:
            data32 = <int32_t *>data
            for i in range(n):
                if data32[i] == bcf_int32_vector_end:
                    break
                value.append(data32[i] if data32[i] != bcf_int32_missing else None)
        elif type == BCF_BT_FLOAT:
            dataf = <float *>data
            for i in range(n):
                if bcf_float_is_vector_end(dataf[i]):
                    break
                value.append(dataf[i] if not bcf_float_is_missing(dataf[i]) else None)
        else:
            raise TypeError('unsupported info type code')

        print('>>> n = %d' % (n,))

        if not value:
            value = None
        elif scalar and len(value) == 1:
            value = value[0]
        else:
            value = tuple(value)
    return value

